d2 <- df_list$cv2[,c("age_group", "subs_status")]
d3 <- df_list$cv3[,c("age_group", "subs_status")]
d1 <- rbind(d1, d2)
d1 <- rbind(d1, d3)
d1$age_group %<>%
factor(levels = c("Under 40 år", "40-65 år", "Över 65 år"))
d1$subs_status %<>%
factor(levels = c("Nej, har ej prenumeration", "Ja (papperstidning)", "Ja (enbart digitalt)"))
gg1 <- ggplot(data=d1, aes(x=age_group)) +
geom_bar(color='coral1', fill='white') +
coord_flip() +
theme_minimal() +
xlab('Age group') +
ylab('# of respondents')
gg2 <- ggplot(data=d1, aes(x=subs_status)) +
geom_bar(color='coral1', fill='white') +
coord_flip() +
theme_minimal() +
xlab('Subscription status') +
ylab('# of respondents')
grid.arrange(gg1, gg2, nrow=2, ncol=1)
}
getDemographics()
print(length(d1))
getDemographics <- function() {
d1 <- df_list$cv1[,c("age_group", "subs_status")]
d2 <- df_list$cv2[,c("age_group", "subs_status")]
d3 <- df_list$cv3[,c("age_group", "subs_status")]
d1 <- rbind(d1, d2)
d1 <- rbind(d1, d3)
d1$age_group %<>%
factor(levels = c("Under 40 år", "40-65 år", "Över 65 år"))
d1$subs_status %<>%
factor(levels = c("Nej, har ej prenumeration", "Ja (papperstidning)", "Ja (enbart digitalt)"))
gg1 <- ggplot(data=d1, aes(x=age_group)) +
geom_bar(color='coral1', fill='white') +
coord_flip() +
theme_minimal() +
xlab('Age group') +
ylab('# of respondents')
gg2 <- ggplot(data=d1, aes(x=subs_status)) +
geom_bar(color='coral1', fill='white') +
coord_flip() +
theme_minimal() +
xlab('Subscription status') +
ylab('# of respondents')
grid.arrange(gg1, gg2, nrow=2, ncol=1)
print(length(d1))
}
getDemographics()
getDemographics <- function() {
d1 <- df_list$cv1[,c("age_group", "subs_status")]
d2 <- df_list$cv2[,c("age_group", "subs_status")]
d3 <- df_list$cv3[,c("age_group", "subs_status")]
d1 <- rbind(d1, d2)
d1 <- rbind(d1, d3)
d1$age_group %<>%
factor(levels = c("Under 40 år", "40-65 år", "Över 65 år"))
d1$subs_status %<>%
factor(levels = c("Nej, har ej prenumeration", "Ja (papperstidning)", "Ja (enbart digitalt)"))
gg1 <- ggplot(data=d1, aes(x=age_group)) +
geom_bar(color='coral1', fill='white') +
coord_flip() +
theme_minimal() +
xlab('Age group') +
ylab('# of respondents')
gg2 <- ggplot(data=d1, aes(x=subs_status)) +
geom_bar(color='coral1', fill='white') +
coord_flip() +
theme_minimal() +
xlab('Subscription status') +
ylab('# of respondents')
grid.arrange(gg1, gg2, nrow=2, ncol=1)
print(nrow(d1))
}
getDemographics()
source('~/DN-R/news-conjoint-analysis/2_Script/conjoint_visualisations.R', echo=TRUE)
View(full_importances)
View(full_results)
test <- full_results
test %>%
group_by(age_group)
test %>%
group_by(subs_status)
test %>%
group_by(Segment)
test %>%
group_by(Segment) %>%
mutate(shares = Alternative_Average / test$Alternative_Average[test$Levels == 'Intercept'])
test %<>%
group_by(Segment) %>%
mutate(shares = Alternative_Average / test$Alternative_Average[test$Levels == 'Intercept'])
View(test)
test %<>%
group_by(Segment) %>%
mutate(shares = round(Alternative_Average / test$Alternative_Average[test$Levels == 'Intercept']))
test %<>%
group_by(Segment) %>%
mutate(shares = round(Alternative_Average / test$Alternative_Average[test$Levels == 'Intercept']), 2)
test %<>%
group_by(Segment) %>%
mutate(shares = round(Alternative_Average / test$Alternative_Average[test$Levels == 'Intercept'], 2))
full_results %<>%
group_by(Segment) %>%
mutate(shares = round(Alternative_Average / test$Alternative_Average[test$Levels == 'Intercept'], 2))
ggplot(full_results, aes(x=Levels, group = Segment)) +
geom_line(aes(y = shares, color = Segment), size=1, alpha = 0.7) +
theme_minimal()
test %<>%
group_by(Segment) %>%
mutate(shares = round(Alternative_Average / Alternative_Average[Levels == 'Intercept'], 2))
full_results %<>%
group_by(Segment) %>%
mutate(shares = round(Alternative_Average / Alternative_Average[Levels == 'Intercept'], 2))
ggplot(full_results, aes(x=Levels, group = Segment)) +
geom_line(aes(y = shares, color = Segment), size=1, alpha = 0.7) +
theme_minimal()
View(FracDesign)
partWorthPlot_v2 <- function(part_worths_data, attribute_name) {
subs <- droplevels(subset(part_worths_data, Variable == attribute_name))
subs$Levels <- reorder(subs$Levels,subs$shares)
#if (min(subs$Average)<0) {
#  subs$Average <- subs$Average + abs(min(subs$Average))
#}
gg1 <- ggplot(data=subs,aes(x=Levels, y=shares, group=Segment)) +
geom_line(aes(color = Segment), size = 2, alpha = 0.5) +
geom_point() +
ylab("Part-Worth Average") +
ggtitle(attribute_name) +
theme_minimal()
return(gg1)
}
visualisePartWorths_v2 <- function(part_worths_data, attribute_name_list) {
for (i in 1:length(attribute_name_list)) {
attr_name <- attribute_name_list[i]
plot_name <- paste("gg",i,sep="")
assign(plot_name, partWorthPlot_v2(part_worths_data = part_worths_data, attribute_name = attr_name))
}
grid.arrange(gg1, gg2, gg3, gg4, gg5, gg6, gg7, nrow=3, ncol=3)
}
visualisePartWorths_v2(part_worths_data = full_results, attribute_name_list = attrs)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
######################################################
##### DESIGN EXPERIMENT VARIANTS
######################################################
# Create a Fractional design
FracDesign <- createFracDesign()
View(FracDesign)
# Check how many variants you save between the Full Factorial design and Fractional design
compareFullDesign()
######################################################
##### IMPORT AND CLEAN DATA
######################################################
df_list <- importAndCleanData()
View(df_list)
######################################################
##### CREATE COMPLETE PREFERENCES
######################################################
Data = createCompletePreferences(input_data = df_list)
Data$random_id <- NULL
View(Data)
# Check unique values in the descriptive fields to use as filter
unique(Data$age_group)
unique(Data$subs_status)
# Set your filter settings (this is changeable)
filter_variable <- quo(age_group) # IMPORTANT! ADD QUO() AROUND THE VARIABLE.
filter_values = c("Under 40 år", "40-65 år", "Över 65 år") # c("Under 40 år", "40-65 år", "Över 65 år")
# Run the conjoint analysis
CJA <- runConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_values)
CJA$Results
CJA$Importances
CJA$Market
######################################################
##### VISUALISE CONJOINT DATA PER SEGMENT
######################################################
attrs <- c('Price', 'ExtraAccounts', 'eDN', 'AdFree', 'Korsord', 'ErbjudandeDiscount', 'Arkiv') # This is hard-coded into the script. If you wish to change it, you have to change lots of stuff :)
visualisePartWorths(part_worths_data = CJA$Results, attribute_name_list = attrs)
visualiseRelativeImportances(importances_data = CJA$Importances)
visualiseMarketShare(market_data = CJA$Market, attribute_name = 'Korsord')
######################################################
##### SANITY CHECK: REGRESSION COEFFICIENTS BASED ON AN AVERAGE PACKAGE RATING - HOW DOES THAT AFFECT OUR CONCLUSIONS?
######################################################
ggplot(CJA$Results, aes(x=Levels, group = 1)) +
geom_line(aes(y = Average), color = "coral", size=1, alpha = 0.7) +
geom_line(aes(y = Alternative_Average), color="steelblue", size = 1, alpha = 0.7) +
theme_minimal()
ggplot(CJA$Importances, aes(x=Variable, group = 1)) +
geom_line(aes(y = Average), color = "coral", size=1, alpha = 0.7) +
geom_line(aes(y = Alternative_Average), color="steelblue", size = 1, alpha = 0.7) +
theme_minimal()
# Set your filter settings (this is changeable)
#filter_variable <- quo(age_group)
filter_variable <- quo(subs_status) # IMPORTANT! ADD QUO() AROUND THE VARIABLE.
# Select the filter variables to loop through.
#filter_list = list(c("Under 40 år"), c("40-65 år"), c("Över 65 år"))
filter_list = list(c("Ja (enbart digitalt)"), c("Ja (papperstidning)"), c("Nej, har ej prenumeration"))
# Create an empty dataframe to fill.
full_results <- data.frame(Variable=as.character(),
Levels=character(),
Average=as.integer(),
Alternative_average=as.integer(),
Segment=as.character())
full_importances <- data.frame(Variable=as.character(),
Average=as.integer(),
Alternative_average=as.integer(),
Segment=as.character())
for (i in 1:length(filter_list)) {
# Run the conjoint analysis for a filtered dataset.
CJA <- runConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_list[i])
# Add a field with the filtered segment's name.
CJA$Results$Segment <- unlist(filter_list[i])
CJA$Importances$Segment <- unlist(filter_list[i])
# Create a temporary dataframe for the part-worths.
temp_part_worths <- CJA$Results
temp_importances <- CJA$Importances
# Append the temporary dataframe to our main dataframe.
full_results <- rbind(full_results, temp_part_worths)
full_importances <- rbind(full_importances, temp_importances)
}
# Add SHARES: that is, percentage change from intercept.
full_results %<>%
group_by(Segment) %>%
mutate(shares = round(Alternative_Average / Alternative_Average[Levels == 'Intercept'], 2))
ggplot(full_results, aes(x=Levels, group = Segment)) +
geom_line(aes(y = shares, color = Segment), size=1, alpha = 0.7) +
theme_minimal()
partWorthPlot_v2 <- function(part_worths_data, attribute_name) {
subs <- droplevels(subset(part_worths_data, Variable == attribute_name))
subs$Levels <- reorder(subs$Levels,subs$Alternative_Average)
#if (min(subs$Average)<0) {
#  subs$Average <- subs$Average + abs(min(subs$Average))
#}
gg1 <- ggplot(data=subs,aes(x=Levels, y=Alternative_Average, group=Segment)) +
geom_line(aes(color = Segment), size = 2, alpha = 0.5) +
geom_point() +
ylab("Part-Worth Average") +
ggtitle(attribute_name) +
theme_minimal()
return(gg1)
}
visualisePartWorths_v2 <- function(part_worths_data, attribute_name_list) {
for (i in 1:length(attribute_name_list)) {
attr_name <- attribute_name_list[i]
plot_name <- paste("gg",i,sep="")
assign(plot_name, partWorthPlot_v2(part_worths_data = part_worths_data, attribute_name = attr_name))
}
grid.arrange(gg1, gg2, gg3, gg4, gg5, gg6, gg7, nrow=3, ncol=3)
}
visualisePartWorths_v2(part_worths_data = full_results, attribute_name_list = attrs)
visualiseRelativeImportances_v2 <- function(importances_data) {
ggplot(importances_data, aes(x=reorder(Variable, Alternative_Average), y=Alternative_Average, group=Segment)) +
geom_col(aes(fill=Segment), position = "dodge") +
coord_flip() +
scale_y_continuous(labels = function(x)paste(x*100, "%")) +
ylab("Relative Importance") +
xlab("Attributes") +
labs(title = "Price is value-driving",
subtitle = "Other attributes carry varying but insignificant weight") +
theme_minimal()
}
visualiseRelativeImportances_v2(importances_data = full_importances)
ggplot(full_results, aes(x=Levels, group = Segment)) +
geom_line(aes(y = shares, color = Segment), size=1, alpha = 0.7) +
theme_minimal()
View(full_results)
View(full_importances)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
CJA2 <- runSegmentedConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_values)
CJA2 <- runSegmentedConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_list)
CJA2$Results
CJA2$Importances
visualisePartWorths_v2(part_worths_data = full_results, attribute_name_list = attrs)
visualisePartWorths_v2(part_worths_data = CJA2$Results, attribute_name_list = attrs)
attrs
test <- CJA2$Results
View(test)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
CJA2 <- runSegmentedConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_list)
test <- CJA2$Results
View(test)
visualisePartWorths_v2(part_worths_data = full_results, attribute_name_list = attrs)
visualisePartWorths_v2(part_worths_data = CJA2$Results, attribute_name_list = attrs)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
visualisePartWorths_v2(part_worths_data = CJA2$Results, attribute_name_list = attrs)
visualisePartWorths_v2(part_worths_data = CJA2$Results, attribute_name_list = attrs, segmented = TRUE)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
visualisePartWorths(part_worths_data = CJA2$Results, attribute_name_list = attrs, segmented = TRUE)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
######################################################
##### DESIGN EXPERIMENT VARIANTS
######################################################
# Create a Fractional design
FracDesign <- createFracDesign()
# Check how many variants you save between the Full Factorial design and Fractional design
compareFullDesign()
######################################################
##### IMPORT AND CLEAN DATA
######################################################
df_list <- importAndCleanData()
######################################################
##### CREATE COMPLETE PREFERENCES
######################################################
Data = createCompletePreferences(input_data = df_list) # This is the key in the PRIMARY METHOD.
Data$random_id <- NULL
# Check unique values in the descriptive fields to use as filter
unique(Data$age_group)
unique(Data$subs_status)
# Set your filter settings (this is changeable)
filter_variable <- quo(age_group) # IMPORTANT! ADD QUO() AROUND THE VARIABLE.
filter_values = c("Under 40 år", "40-65 år", "Över 65 år") # c("Under 40 år", "40-65 år", "Över 65 år")
# Run the conjoint analysis
CJA <- runConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_values)
CJA$Results
CJA$Importances
CJA$Market
######################################################
##### VISUALISE CONJOINT DATA PER SEGMENT
######################################################
attrs <- c('Price', 'ExtraAccounts', 'eDN', 'AdFree', 'Korsord', 'ErbjudandeDiscount', 'Arkiv') # This is hard-coded into the script. If you wish to change it, you have to change lots of stuff :)
visualisePartWorths(part_worths_data = CJA$Results, attribute_name_list = attrs)
visualiseRelativeImportances(importances_data = CJA$Importances)
visualiseMarketShare(market_data = CJA$Market, attribute_name = 'Korsord')
######################################################
##### SANITY CHECK: REGRESSION COEFFICIENTS BASED ON AN AVERAGE PACKAGE RATING - HOW DOES THAT AFFECT OUR CONCLUSIONS?
######################################################
ggplot(CJA$Results, aes(x=Levels, group = 1)) +
geom_line(aes(y = Average), color = "coral", size=1, alpha = 0.7) +
geom_line(aes(y = Alternative_Average), color="steelblue", size = 1, alpha = 0.7) +
theme_minimal()
ggplot(CJA$Importances, aes(x=Variable, group = 1)) +
geom_line(aes(y = Average), color = "coral", size=1, alpha = 0.7) +
geom_line(aes(y = Alternative_Average), color="steelblue", size = 1, alpha = 0.7) +
theme_minimal()
# Set your filter settings (this is changeable)
#filter_variable <- quo(age_group)
filter_variable <- quo(subs_status) # IMPORTANT! ADD QUO() AROUND THE VARIABLE.
# Select the filter variables to loop through.
#filter_list = list(c("Under 40 år"), c("40-65 år"), c("Över 65 år"))
filter_list = list(c("Ja (enbart digitalt)"), c("Ja (papperstidning)"), c("Nej, har ej prenumeration"))
# Run a segmented CJA
CJA2 <- runSegmentedConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_list)
CJA2$Results
CJA2$Importances
visualisePartWorths(part_worths_data = CJA2$Results, attribute_name_list = attrs, segmented = TRUE)
visualiseRelativeImportances_Segmented(importances_data = full_importances)
visualiseRelativeImportances_Segmented(importances_data = CJA2$Importances)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
######################################################
##### DESIGN EXPERIMENT VARIANTS
######################################################
# Create a Fractional design
FracDesign <- createFracDesign()
# Check how many variants you save between the Full Factorial design and Fractional design
compareFullDesign()
######################################################
##### IMPORT AND CLEAN DATA
######################################################
df_list <- importAndCleanData()
write.csv(df_list$cv1,"../news-conjoint-analysis/3_Output/conjoint_enkät_variant1_mockup.csv", row.names = FALSE)
test <- df_list$cv1
View(test)
cv1 <- read.csv(file="../news-conjoint-analysis/1_Data/conjoint_enkät_variant1.csv", header=TRUE)
View(cv1)
cv1 <- read.csv(file="../news-conjoint-analysis/1_Data/conjoint_enkät_variant1.csv", header=TRUE)
cv2 <- read.csv(file="../news-conjoint-analysis/1_Data/conjoint_enkät_variant2.csv", header=TRUE)
cv3 <- read.csv(file="../news-conjoint-analysis/1_Data/conjoint_enkät_variant3.csv", header=TRUE)
cv1[, c('X')] <- NULL
cv2[, c('X')] <- NULL
cv3[, c('X')] <- NULL
View(cv1)
write.csv(df_list$cv1,"../news-conjoint-analysis/3_Output/conjoint_enkät_variant1_mockup.csv", row.names = FALSE)
write.csv(df_list$cv2,"../news-conjoint-analysis/3_Output/conjoint_enkät_variant2_mockup.csv", row.names = FALSE)
write.csv(df_list$cv3,"../news-conjoint-analysis/3_Output/conjoint_enkät_variant3_mockup.csv", row.names = FALSE)
write.csv(cv1,"../news-conjoint-analysis/3_Output/conjoint_enkät_variant1_mockup.csv", row.names = FALSE)
write.csv(cv2,"../news-conjoint-analysis/3_Output/conjoint_enkät_variant2_mockup.csv", row.names = FALSE)
write.csv(cv3,"../news-conjoint-analysis/3_Output/conjoint_enkät_variant3_mockup.csv", row.names = FALSE)
######################################################
##### PACKAGES
######################################################
# Get all necessary standard packages and custom functions
source("../news-conjoint-analysis/2_Script/conjoint_functions.R")
source("../news-conjoint-analysis/2_Script/conjoint_auto_calculations.R")
######################################################
##### DESIGN EXPERIMENT VARIANTS
######################################################
# Create a Fractional design
FracDesign <- createFracDesign()
# Check how many variants you save between the Full Factorial design and Fractional design
compareFullDesign()
######################################################
##### IMPORT AND CLEAN DATA
######################################################
df_list <- importAndCleanData()
test <- df_list$cv1
View(df_list)
View(test)
test <- df_list$cv2
test <- df_list$cv3
rm(test)
######################################################
##### CREATE COMPLETE PREFERENCES
######################################################
Data = createCompletePreferences(input_data = df_list) # This is the key in the PRIMARY METHOD.
Data$random_id <- NULL
# Check unique values in the descriptive fields to use as filter
unique(Data$age_group)
unique(Data$subs_status)
# Set your filter settings (this is changeable)
filter_variable <- quo(age_group) # IMPORTANT! ADD QUO() AROUND THE VARIABLE.
filter_values = c("Under 40 år", "40-65 år", "Över 65 år") # c("Under 40 år", "40-65 år", "Över 65 år")
# Run the conjoint analysis
CJA <- runConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_values)
CJA$Results
CJA$Importances
CJA$Market
######################################################
##### VISUALISE CONJOINT DATA PER SEGMENT
######################################################
attrs <- c('Price', 'ExtraAccounts', 'eDN', 'AdFree', 'Korsord', 'ErbjudandeDiscount', 'Arkiv') # This is hard-coded into the script. If you wish to change it, you have to change lots of stuff :)
visualisePartWorths(part_worths_data = CJA$Results, attribute_name_list = attrs)
visualiseRelativeImportances(importances_data = CJA$Importances)
visualiseMarketShare(market_data = CJA$Market, attribute_name = 'Korsord')
######################################################
##### SANITY CHECK: REGRESSION COEFFICIENTS BASED ON AN AVERAGE PACKAGE RATING - HOW DOES THAT AFFECT OUR CONCLUSIONS?
######################################################
ggplot(CJA$Results, aes(x=Levels, group = 1)) +
geom_line(aes(y = Average), color = "coral", size=1, alpha = 0.7) +
geom_line(aes(y = Alternative_Average), color="steelblue", size = 1, alpha = 0.7) +
theme_minimal()
ggplot(CJA$Importances, aes(x=Variable, group = 1)) +
geom_line(aes(y = Average), color = "coral", size=1, alpha = 0.7) +
geom_line(aes(y = Alternative_Average), color="steelblue", size = 1, alpha = 0.7) +
theme_minimal()
# Set your filter settings (this is changeable)
#filter_variable <- quo(age_group)
filter_variable <- quo(subs_status) # IMPORTANT! ADD QUO() AROUND THE VARIABLE.
# Select the filter variables to loop through.
#filter_list = list(c("Under 40 år"), c("40-65 år"), c("Över 65 år"))
filter_list = list(c("Ja (enbart digitalt)"), c("Ja (papperstidning)"), c("Nej, har ej prenumeration"))
# Run a segmented CJA
CJA2 <- runSegmentedConjointAnalysis(data = Data,
frac_design = FracDesign,
filter_variable = filter_variable,
filter_values_list = filter_list)
CJA2$Results
CJA2$Importances
visualisePartWorths(part_worths_data = CJA2$Results, attribute_name_list = attrs, segmented = TRUE)
visualiseRelativeImportances_Segmented(importances_data = CJA2$Importances)
install.packages("renv")
######################################################
##### PACKAGES
######################################################
library(renv)
